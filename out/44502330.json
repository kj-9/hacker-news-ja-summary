{
  "comments_id": "44502330",
  "rank": 1,
  "title": "CVE-2025-48384: Breaking Git with a carriage return and cloning RCE",
  "link": "https://dgl.cx/2025/07/git-clone-submodule-cve-2025-48384",
  "created_date": "2025-07-08T20:13:36.328904",
  "comments_summary": "これは、Gitのセキュリティ脆弱性、特にサブモジュールのクローン作成に関連するリモートコード実行（RCE）の脆弱性について議論しているHacker Newsのスレッドです。\n\n## 主なテーマ\n\n### 1. C言語 vs 他の言語\n多くの人が、この種の脆弱性がC言語特有のものなのか、それとも他の言語でも起こりうるのかについて議論しています。\n- C言語の肩を持つ人は、これは本質的にはどの言語でも起こりうるロジックエラーだと主張しています。\n- 別の言語（Rust、Go、Pythonなど）の支持者は、より安全な抽象化と、シリアライズ/デシリアライズコードを手書きするのではなく、実績のあるライブラリを使用する傾向があるため、これらの言語ではこの種のバグが発生しにくいと主張しています。\n- ただし、多くの人が、他の言語を使用したとしても、同様の実装では同じバグが発生した可能性があると指摘しています。\n\n### 2. 依存関係とパッケージマネージャー\n議論の中には、堅牢なパッケージマネージャーを使用すると、そのような脆弱性を防ぐことができるかどうかという問題も含まれています。\n- パッケージマネージャーがないCのエコシステムが、脆弱性の原因であると主張する人もいます。\n- 依存関係の多用は、新たな問題を引き起こす可能性があると指摘する人もいます。\n\n### 3. エクスプロイトの深刻度とPoC\nエクスプロイトの深刻度と、概念実証（PoC）コードを共有する必要があるかどうかについても議論があります。\n- リポジトリに悪意のあるGitフックを含めることで、clone操作中にコードが実行される可能性があるという事実が強調されています。\n- 情報が十分に提供されているため、エクスプロイトは誰でも簡単に作成できるため、PoCエクスプロイトコードを配布する理由はないと主張する人もいます。\n\n### 4. Gitのセキュリティ対策\nGitがLandlockなどのセキュリティ対策を使用していない理由についても議論があります。\n- 「git clone」操作は、構成ディレクトリへの読み取り専用アクセス、クローンディレクトリへの読み書きアクセス、およびサブプロセスの禁止に制限されるべきだと主張する人もいます。\n\n## まとめ\n全体として、このスレッドはGitのセキュリティ脆弱性とその根本原因について多岐にわたる議論を展開しています。C言語の使用、言語設計のトレードオフ、依存関係の管理、そしてセキュリティ対策の重要性など、さまざまな視点から議論されています。"
}