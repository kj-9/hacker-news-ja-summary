{
  "comments_id": "44627793",
  "rank": 3,
  "title": "Stdio(3) change: FILE is now opaque (OpenBSD)",
  "link": "https://undeadly.org/cgi?action=article;sid=20250717103345",
  "created_date": "2025-07-20T20:13:28.328947",
  "comments_summary": "この Hacker News のコメントスレッドは、`FILE` 構造体の内部構造に依存することが悪い習慣であるかどうか、そして歴史的にどのように使用されてきたかについて議論しています。\n\n## `FILE` 構造体の内部構造への依存\n\n一部の開発者は、パフォーマンスの最適化や特定の機能の実装のために、`FILE` 構造体の内部構造にアクセスすることがあります。しかし、これは移植性を損ない、将来の変更によってコードが壊れる可能性があるため、一般的には推奨されません。\n\n## 歴史的な背景\n\n過去には、`FILE` 構造体が公開されており、`fileno()` のような関数がマクロとして実装されることがありました。また、古いメールクライアント（MH、nmh）は、パフォーマンス上の理由から `FILE` 構造体の内部を直接操作していました。\n\n## 実用的な考慮事項\n\n*   **Hyrum's Law:** 公開されているものはすべてAPIの一部とみなされるため、`FILE` 構造体の内部構造が公開されていれば、誰かがそれを利用する可能性があります。\n*   **移植性:** `FILE` 構造体の実装はシステムによって異なるため、内部構造に依存するコードは移植性が低くなります。\n*   **ABI の変更:** Linux は ABI の変更に慎重ですが、OpenBSD は比較的容易に変更を行います。\n\n## まとめ\n\n`FILE` 構造体の内部構造への依存は、パフォーマンスの最適化に役立つことがありますが、移植性や将来の互換性の問題を引き起こす可能性があります。したがって、`FILE` 構造体は原則として不透明なものとして扱い、標準化されたAPIを使用することが推奨されます。"
}