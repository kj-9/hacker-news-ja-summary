{
  "comments_id": "43888005",
  "rank": 9,
  "title": "Load-Store Conflicts",
  "link": "https://zeux.io/2025/05/03/load-store-conflicts/",
  "created_date": "2025-05-04T20:11:51.692001",
  "comments_summary": "この記事はstore-to-load forwardingについて解説しています。\n\n## store-to-load forwardingの詳細\n\nhabermanは、この記事がstore-to-load forwardingについてこれまで読んだ中で最も詳細な記事だと述べています。\n\n## ClangのLoad結合\n\nSesse__は、ClangがLoad結合に熱心すぎると感じており、特にスタックを通じて構造体を返す場合に問題があると言います。AMDではこれが大きな問題ですが、IntelとAppleはより優れているようです。\n\n## AMD、Intel、Appleの比較\n\ncwzwarichは、Intelは単一のstoreからの転送しか許可せず、大きなペナルティなしに部分的な転送（混合キャッシュ/レジスタ）を許可していなかったと述べています。一方、AMDは少なくとも部分的な転送を許可していました（またはIntelよりもペナルティが大幅に低かった）。Sesse__は、AMDがより多くの状況を許可しているかどうかは不明ですが、経験的にはZen 2と3で多くのサイクルが失われており、Intel CPU（主にSkylake派生とAlder Lake）でははるかに少ないと述べています。Zen 4または5はテストしていませんが、大幅に改善されているという話は聞いていません。cwzwarichは、この問題を回避するためにLLVMパスがIntelのエンジニアによって提供された可能性があるため、偏りがあるかもしれないと指摘しています。\n\n## まとめ\n\nこの記事はstore-to-load forwardingについて解説し、ClangのLoad結合の問題と、AMD、Intel、AppleのCPU間でのパフォーマンスの違いについて議論しています。"
}