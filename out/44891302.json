{
  "comments_id": "44891302",
  "rank": 8,
  "title": "Cross-Site Request Forgery",
  "link": "https://words.filippo.io/csrf/",
  "created_date": "2025-08-13T20:13:16.461129",
  "comments_summary": "以下はHacker Newsのコメントの要約です。このディスカッションでは、Sec-Fetchヘッダー、Cookieのセキュリティ、SameSite属性、およびHTTPメソッドの適切な使用法について議論しています。\n\n## Sec-Fetchヘッダー\n\nnchmyは、Go 1.25の変更ログにより最近Sec-Fetchを発見し、トークンが現在使用されている一部のアプリケーションでの使用に期待しています。jerfは、Cookieのセキュリティを確保するために必要な属性の複雑さを嘆き、後方互換性の問題を理解しつつも、最新の状態に保つことの難しさを強調しています。\n\n## CookieのセキュリティとSameSite属性\n\njerfはCookieのセキュリティ属性の複雑さについて不満を述べています。一方、akerstenは、SameSite Cookie属性がCSRFを修正しない理由についての記事の説明が理解できないと述べています。MajesticHobo2は、サイトとオリジンの間に同等性がないことが問題であり、SameSiteでは異なる信頼レベルを持つサブドメイン間のリクエストを防ぐことができないと説明しています。\n\n## HTTPメソッドの適切な使用法\n\nMajesticHobo2は、GETリクエストが状態を変更しないという仮定に同意しないと述べています。chrisfosterelliは、これを行うアプリケーションにはバグがあり、HTTP標準に違反していると考えています。pstuartは、これらのメソッドをべき等として扱うべきであることに同意しています。\n\n## まとめ\n\nこのディスカッションでは、Webセキュリティの複雑さと、Cookieのセキュリティ、CSRF対策、およびHTTPメソッドの適切な使用法に関する継続的な課題が浮き彫りになっています。Sec-Fetchヘッダーは有望なソリューションを提供しますが、開発者はCookieのセキュリティ設定の複雑さを認識し、HTTPメソッドを正しく使用して予期しない副作用を防ぐ必要があります。"
}