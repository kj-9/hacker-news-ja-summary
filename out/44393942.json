{
  "comments_id": "44393942",
  "rank": 7,
  "title": "Parameterized types in C using the new tag compatibility rule",
  "link": "https://nullprogram.com/blog/2025/06/26/",
  "created_date": "2025-06-27T20:13:16.013987",
  "comments_summary": "この Hacker News のコメントスレッドでは、C23 の構造体タグの互換性に関する提案、C++ との比較、および C でのジェネリックプログラミングのアプローチについて議論されています。\n\n## C23 の構造体タグの互換性\n\nC23 で提案されている構造体タグの互換性により、同じ翻訳単位内で複数回定義された同じフィールドを持つ構造体は同じものとして扱われるようになります。これは、以前は未定義の動作とされていました。\n\n## C vs C++\n\nC++ のテンプレート機能は C にはないため、C++ を使う方が良いという意見があります。しかし、C++ はコンパイル時間が長く、エラーメッセージが読みにくいという欠点があります。また、組み込みシステムプログラミングなど、C++ が必ずしも利用できない場合もあります。\n\n## C でのジェネリックプログラミング\n\nC でジェネリックな型を実装するさまざまな方法が議論されています。C23 の `auto` キーワードと構造体タグの互換性を組み合わせることで、C++ の STL のようなコンテナを C で実装できる可能性があります。また、マクロを使用してジェネリックな型を実装する方法や、`_Generic` キーワードを使用する方法も紹介されています。\n\n## その他\n\n議論の中では、サイズやインデックスの型として符号付き整数と符号なし整数のどちらを使用すべきかという問題も提起されています。一部の開発者は、符号付き整数を使用すると、オーバーフローを検出しやすくなると主張しています。\n\n## まとめ\n\nこのスレッドでは、C23 の構造体タグの互換性に関する提案をきっかけに、C と C++ のトレードオフ、C でのジェネリックプログラミングのさまざまなアプローチ、そしてサイズやインデックスの型として符号付き整数と符号なし整数のどちらを使用すべきかという問題について議論が展開されました。"
}