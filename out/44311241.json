{
  "comments_id": "44311241",
  "rank": 2,
  "title": "The Unreasonable Effectiveness of Fuzzing for Porting Programs",
  "link": "https://rjp.io/blog/2025-06-17-unreasonable-effectiveness-of-fuzzing",
  "created_date": "2025-06-18T20:14:10.934197",
  "comments_summary": "著者がClaudeをRustに移植する試みについて議論しています。\n\n## ポーティングとテスト\n\n移植における課題は、入力データの生成と正しさの記述です。移植の場合、元のプログラムとの一致が正しさの基準となります。徹底的なテストを行う予算がない場合、古いシステムにバグがあっても、新しいシステムに移植することで初めて問題が明らかになることがあります。\n\n## LLM（大規模言語モデル）の活用\n\nLLMは、コードの移植、APIの変更、大規模なリファクタリングなど、これまで困難だった作業を容易にする可能性があります。ただし、変更内容を十分に文書化することと、LLMプロンプトを作成して自動的に移行することに大きな違いはないという意見もあります。\n\n## テスト手法\n\nファジングが有効な領域は、形式検証にも適しています。形式検証は網羅性によって行えますが、LLMと組み合わせることで、特定の組み合わせをテストする必要がないことを証明できます。プロパティテストやミューテーションテストも、テスト生成に役立つ可能性があります。\n\n## まとめ\n\n全体として、LLMを活用したコード移植とテストの可能性が議論されています。特に、移植における正しさの検証、LLMによる自動化、そして形式検証やプロパティテストなどのテスト手法の組み合わせが注目されています。"
}