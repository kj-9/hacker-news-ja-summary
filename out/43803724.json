{
  "comments_id": "43803724",
  "rank": 8,
  "title": "Stuffed-Na(a)N: stuff your NaNs",
  "link": "https://github.com/si14/stuffed-naan-js",
  "created_date": "2025-04-26T20:11:37.431672",
  "comments_summary": "この記事は、NaN（非数）のビットパターンを利用して、データ型を区別したり、追加の情報を格納したりするテクニックについて議論しています。\n\n## NaNボクシングと動的言語の実装\n\nNaNボクシングは、NaNのビットパターンを利用して、数値以外の情報を格納するテクニックであり、動的言語の実装によく使われます。IEEE 754規格では、NaNのペイロードに「無効なデータや利用できないデータから継承された回顧的な診断情報」を含めることが想定されており、NaNボクシングもその延長線上にあると考えられます。\n\n## NaNの設計とエラー処理\n\nIEEE 754規格の設計者は、数学的に未定義の操作（0除算など）が発生した場合に、トラップ（エラー）を発生させるのではなく、NaNを生成して計算を続行させることを意図していました。これは、1970～80年代には、計算を中断させるよりもNaNを生成する方が望ましいと考えられていたためです。\n\n## NaNの応用と制限\n\nNaNのビットパターンは、ロックフリーアルゴリズムにおける補助データの格納や、Rustコンパイラの「ニッチ最適化」など、様々な用途に利用できます。ただし、Firefoxのように、NaNを正規化してしまう環境では、NaNボクシングが機能しない場合があります。\n\n## C23における浮動小数点関連の新しい機能\n\nC23規格では、NaNの処理、符号付きゼロ、エッジケースにおける精度など、浮動小数点数に関連する多くの新しい関数が導入されました。これらの機能により、浮動小数点数の処理がより柔軟かつ正確になります。\n\n## まとめ\n\nNaNは、単なるエラー値ではなく、そのビットパターンを利用することで、様々な情報を格納したり、データ型を区別したりすることが可能です。NaNボクシングやC23の新しい浮動小数点数関連の機能は、NaNの応用範囲を広げる可能性を秘めています。"
}