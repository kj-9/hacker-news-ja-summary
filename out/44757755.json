{
  "comments_id": "44757755",
  "rank": 9,
  "title": "Hyrum's Law",
  "link": "https://www.hyrumslaw.com",
  "created_date": "2025-08-01T20:13:56.174530",
  "comments_summary": "これは、ハイラムの法則、つまり「API の使用者が API の仕様書に明記されていなくても、API が提供するすべてのものを利用する」ことについての Hacker News のスレッドの要約です。\n\n## API 設計者の視点\n\nAPI 設計者は、ハイラムの法則を考慮する必要がある。API の仕様書に明記されていなくても、API が提供するすべてのものを利用するユーザーがいる可能性があるためです。\n\n## ユーザーの視点\n\nユーザーは、API の仕様書に明記されていない API の動作に依存する可能性がある。これは、API が十分に文書化されていない場合や、API の動作が直感的でない場合に特に起こりやすい。\n\n## API のバージョン管理\n\nAPI のバージョン管理は、ハイラムの法則に対処するための 1 つの方法です。API のバージョンを管理することで、API の動作を変更する際に、既存のユーザーに影響を与えずに変更を行うことができます。ただし、API のバージョン管理は、API の複雑さを増し、保守コストを増加させる可能性があります。\n\n## 回避策\n\nハイラムの法則を回避するための 1 つの方法は、API の実装をランダム化することです。API の実装をランダム化することで、ユーザーが API の特定の動作に依存することを防ぐことができます。たとえば、Go 言語のマップのイテレーション順序は、意図的にランダム化されています。\n\n## まとめ\n\nハイラムの法則は、API 設計者とユーザーの両方にとって考慮すべき重要な問題です。API 設計者は、API の仕様書に明記されていなくても、API が提供するすべてのものを利用するユーザーがいる可能性があることを認識する必要があります。ユーザーは、API の仕様書に明記されていない API の動作に依存する可能性があることを認識する必要があります。"
}