{
  "comments_id": "44201762",
  "rank": 9,
  "title": "Too Many Open Files",
  "link": "https://mattrighetti.com/2025/06/04/too-many-files-open",
  "created_date": "2025-06-06T20:13:56.410551",
  "comments_summary": "この記事は、プロセスが開けるファイル記述子の数に上限を設けることの是非について議論しています。\n\n## ファイル記述子制限の必要性\n\n一部の人は、ファイル記述子の数に上限を設けることは、リソースの枯渇やバグのあるプログラムによるシステムの不安定化を防ぐために必要であると主張しています。また、初期のUNIXシステムでは、ファイル記述子の動的な割り当てがサポートされていなかったため、固定サイズの配列を使用していたという歴史的な理由もあります。\n\n## ファイル記述子制限の不要性\n\n他の人は、ファイル記述子の数に上限を設けることは、現代のシステムでは不要であると主張しています。ファイル記述子はカーネルリソースの名前であり、メモリ使用量に直接関係するものではありません。ファイル記述子の制限は、プログラムの設計を歪め、不必要な複雑さを生み出す可能性があります。ファイル記述子の代わりに、カーネルメモリの使用量を直接制御する方が良いでしょう。\n\n## 実用上の問題\n\nmacOSではデフォルトのファイル記述子の制限が非常に低く、ClickHouseなどのアプリケーションに影響を与える可能性があります。また、VSCodeなどのIDEでは、デフォルトで高い制限が設定されているため、他のシェルで発生するバグが隠蔽されることがあります。ファイル記述子のリークが発生した場合、エラーが発生する可能性があります。\n\n## 解決策\n\nファイル記述子の制限を増やすには、ulimitコマンドを使用したり、/etc/security/limits.confファイルを編集したりする方法があります。Goでは、osパッケージをインポートすると、起動時にファイル記述子のソフトリミットがハードリミットまで自動的に引き上げられます。\n\n## まとめ\n\nファイル記述子の制限は、歴史的な経緯やリソース管理の観点から設けられていますが、現代のシステムではその必要性について議論があります。制限を設けることでシステムの安定性を保つことができる一方、プログラムの設計を歪めたり、開発者の生産性を低下させたりする可能性もあります。状況に応じて適切な制限を設定し、必要に応じて引き上げることが重要です。"
}