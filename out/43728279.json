{
  "comments_id": "43728279",
  "rank": 5,
  "title": "A New ASN.1 API for Python",
  "link": "https://blog.trailofbits.com/2025/04/18/sneak-peek-a-new-asn.1-api-for-python/",
  "created_date": "2025-04-18T20:12:14.089077",
  "comments_summary": "ASN.1 とその実装に関する Hacker News の議論の要約です。\n\n## ASN.1 の実装\n\nASN.1 ファイルから Wireshark ディセクタを作成したり、Erlang は ASN.1 をサポートしています。Java 用には yafred の asn1-tool がありましたが、現在は入手できません。asn1bean Java ライブラリを使用していた人もいます。Peculiar Ventures ASN1.js を使用してブラウザ内の PKI プラットフォームを構築した人もいました。Rust 用には rasn ライブラリがあり、ほとんどのコーデックをサポートしています。\n\n## OSS Nokalva の代替\n\nASN.1 の分野では、OSS Nokalva のプロプライエタリなソリューションを誰かが打ち負かすことを誰もが望んでいます。OSS Nokalva の商用 ASN.1 コンパイラは、出力のオープンソースプロジェクトでの使用を妨げます。ただし、コンパイラとランタイムだけでなく、SLA、相互運用性とバグに関する厳密な保証も購入しています。\n\n## UPER の難しさ\n\nDER は簡単ですが、UPER (unaligned packed encoding rules) は非常に難しく、電気通信業界で普及しています。UPER を 100% 処理できる無料のツールは以前はありませんでした。3GPP ASN1 定義は .docx ファイルでのみ提供され、扱いやすいとは言えません。rasn は UPER をサポートしていると主張していますが、どの程度かは不明です。UPER コーデック自体の問題ではなく、ASN.1 定義の正しい言語レベルの表現を作成できるコンパイラがないことが問題です。\n\n## エンコードの選択肢\n\nDER は、ハンドシェイクタイプのステップであり、パフォーマンスよりも決定論が重要であると想定されていたため、合理的な選択でした。PER は 1994 年に定義されました。当時は zlib を「ただ」適用するものではありませんでした。現在では、後方互換性のため、または慣習的に使用されています。UPER は非常にコンパクトなエンコード形式です。すべてのビットがネットワークを通過するのに課金される場合、zlib は不要なオーバーヘッドです。\n\n## まとめ\n\nこのスレッドでは、ASN.1 のさまざまな実装、OSS Nokalva の代替、UPER の難しさ、およびエンコードの選択肢について議論しています。ASN.1 は複雑な規格であり、その実装には多くの課題があります。"
}