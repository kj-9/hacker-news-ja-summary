{
  "comments_id": "43946149",
  "rank": 7,
  "title": "Comparison of C/POSIX standard library implementations for Linux",
  "link": "https://www.etalabs.net/compare_libcs.html",
  "created_date": "2025-05-10T20:11:34.825082",
  "comments_summary": "この記事は、C標準ライブラリの実装であるmusl libcに関するHacker Newsのディスカッションを要約したものです。\n\n## 古い比較表の信頼性\n\nObscureScienceは、提示された比較表が古く、情報が最新であるかどうか疑問を呈しています。jay-barronvilleも比較表がメンテナンスされていないことを指摘しています。\n\n## glibcの肥大化と速度\n\nsnickererは、glibcが肥大化しているにもかかわらず高速であるという認識についてコメントしています。kstrauserは、複雑な実装と高度なアルゴリズムにより速度が向上すると説明しています。weinzierlは、国際化サポート、後方互換性、さまざまなアーキテクチャのサポートなど、glibcの肥大化の要因を指摘しています。SAI_Peregrinusは、glibcの「肥大化」の多くは条件付きでコンパイルされ、ターゲットが古いプラットフォームでなければランタイムに含まれないと述べています。\n\n## musl libcのパフォーマンスと代替アロケータ\n\npizlonatorは、glibcからmuslに切り替えたところ、わずかなパフォーマンスの低下が見られたことを報告しています。LeFantomeは、muslのデフォルトアロケータがパフォーマンスに影響を与えている可能性があり、代替アロケータを使用することで改善される可能性があると述べています。\n\n## ライセンスの問題\n\nthrtythreefortyは、dietlibcのGPLv2ライセンスが非互換性をもたらす可能性があると指摘しています。\n\n## まとめ\n\nディスカッションでは、提示されたlibc比較表の信頼性、glibcの肥大化と速度、musl libcのパフォーマンスと代替アロケータ、およびライセンスの問題について議論されています。全体として、musl libcはglibcに代わる軽量な選択肢ですが、パフォーマンスやライセンスの面で考慮すべき点があります。"
}