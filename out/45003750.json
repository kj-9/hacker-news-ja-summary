{
  "comments_id": "45003750",
  "rank": 9,
  "title": "Dynamically patch a Python function's source code at runtime",
  "link": "https://ericmjl.github.io/blog/2025/8/23/wicked-python-trickery-dynamically-patch-a-python-functions-source-code-at-runtime/",
  "created_date": "2025-08-24T20:12:27.362126",
  "comments_summary": "このHacker Newsのスレッドは、Pythonにおける自己修正コード（SMC）の概念、その応用、および他の言語との比較について議論しています。\n\n## 自己修正コードとLISP\n\nLISPは、その柔軟性とコードをデータとして扱う能力から、自己修正コード（SMC）やAIプログラミングの分野で以前は標準でした。PythonでもAST（抽象構文木）を利用してコードを操作できますが、LISPの「homoiconicity（コードとデータが同じ構造を持つ性質）」ほどシームレスではありません。\n\n## 実用性とLISPの現在\n\nLISPは依然として有用なプロジェクトで使用されています。GoogleのITA Softwareなど、大規模なプロジェクトでLISPが使用され続けています。また、Common Lispを使用したゲーム開発など、新しい分野での応用も存在します。\n\n## 自己修正コードの応用と課題\n\n自己修正コードは、ホットリロードや動的な機能の追加に利用できますが、コードの可読性やデバッグの難しさを招く可能性があります。「モンキーパッチ」という類似のアプローチは、既存のコードを動的に変更するために使用されますが、セキュリティ上の懸念や予期せぬ動作を引き起こす可能性があります。\n\n## ホットリロードライブラリ「Jurigged」\n\n「Jurigged」は、Pythonのホットリロードを実装するためのライブラリです。特定の関数が変更された場合に、モジュール全体を再実行せずに、その関数だけを更新します。このライブラリは、GUIプロトタイピングやコマンドラインツールの開発に役立ちます。\n\n## その他の言語での実現可能性\n\nLISP以外にも、ErlangやC/C++などの言語で自己修正コードや動的なコードの更新が可能です。Rustでも同様のことが可能ですが、より複雑になる可能性があります。\n\n## まとめ\n\nスレッドでは、Pythonにおける自己修正コードの可能性と限界、LISPとの比較、および実用的な応用について議論されました。自己修正コードは強力なツールですが、注意深く使用する必要があります。また、ホットリロードライブラリ「Jurigged」は、Python開発における生産性向上に役立つツールとして紹介されました。"
}