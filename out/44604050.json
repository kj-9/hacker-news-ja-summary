{
  "comments_id": "44604050",
  "rank": 4,
  "title": "lsr: ls with io_uring",
  "link": "https://rockorager.dev/log/lsr-ls-but-with-io-uring/",
  "created_date": "2025-07-18T20:13:52.670171",
  "comments_summary": "この記事は、`ls`コマンドをio_uringを使って高速化する試みである`lsr`について解説しています。\n\n## io_uring とは\n\nio_uringは、Linuxカーネルの非同期I/Oインターフェースであり、システムコールのオーバーヘッドを削減し、I/O処理を高速化することができます。\n\n## なぜ `lsr` を作ったのか\n\n*   `lsr`は、`ls`コマンドを高速化するために、io_uringを利用してZig言語で実装されました。\n*   `ls`コマンドを直接変更するのではなく、新しいコマンド`lsr`を作成したのは、既存の`ls`がC言語で書かれており、作者がZigで書きたいと考えたためです。\n*   また、GNUプロジェクトへの貢献には著作権譲渡が必要となる場合があり、それを避けるためでもあります。\n\n## io_uringの採用に関する議論\n\n*   io_uringは比較的新しい技術であり、セキュリティ上の懸念も指摘されています。\n*   また、従来の同期的なシステムコールをio_uringで置き換えるには、アーキテクチャの変更が必要となり、既存のツールとの互換性を維持するのが難しい場合があります。\n*   セキュリティの問題として、io_uringがカーネルメモリへの直接アクセスを許可することが挙げられています。\n*   Googleなどの組織では、セキュリティ上の理由からio_uringをブロックしている場合があります。\n\n## `lsr` の性能\n\n*   `lsr`は、従来の`ls`コマンドと比較して、システムコールの回数を大幅に削減し、実行速度を向上させています。\n*   ただし、その速度向上の効果は、ディレクトリ内のファイル数やファイルシステムのタイプによって異なります。\n*   ローカライズ機能の欠如が、GNU lsと比較して高速である要因の一つです。\n\n## まとめ\n\n`lsr`は、io_uringを活用して`ls`コマンドを高速化する実験的なプロジェクトです。io_uringは、システムコールのオーバーヘッドを削減し、I/O処理を高速化する可能性を秘めていますが、セキュリティ上の懸念や既存のツールとの互換性の問題など、解決すべき課題も存在します。`lsr`の登場は、今後のシステムユーティリティの進化に一石を投じるものとなるかもしれません。"
}