{
  "comments_id": "44309520",
  "rank": 6,
  "title": "Homomorphically Encrypting CRDTs",
  "link": "https://jakelazaroff.com/words/homomorphically-encrypted-crdts/",
  "created_date": "2025-06-18T20:14:10.934197",
  "comments_summary": "この記事は、競合のない複製データ型（CRDT）と準同型暗号化（FHE）を組み合わせて、サーバーがコンテンツを理解せずにドキュメントの変更を同期できるようにする方法についてです。\n\n## CRDTとFHEの組み合わせの課題\n\nFHEは計算に時間がかかり、この記事のベンチマークでは、暗号化されていないバージョンと比較して、準同型暗号化されたマージは20億倍遅くなりました。CRDTもそのアーキテクチャにより速度が低下する可能性があり、FHEを追加するとさらに遅くなる可能性があります。ただし、CRDTは本質的に遅いわけではなく、最適化されていない実装が原因である可能性があります。\n\n## 同期サーバーのアーキテクチャのトレードオフ\n\n同期サーバーがピア間でアップデートをリレーするだけであれば、非同期で動作させることができます。ただし、サーバーはアップデートを圧縮する方法がないため、ピアが長期間オフラインの場合、大量のデータをダウンロードする必要がある可能性があります。同期サーバーがアップデートをマージできる場合は、ピアがオンラインになったときに圧縮されたアップデートを送信できます。ただし、サーバーはすべてを見ることができます。\n\n## 効率を向上させるための代替案\n\nクライアントが圧縮を行うこともできます。つまり、クライアントは「メッセージ0..1001を適用してドキュメントXを取得した」というメッセージに署名して暗号化します。これにより、通信のオーバーヘッドが発生しますが、準同型暗号化よりもはるかに安価になる可能性があります。また、複数のパーティが分散データ上で共同で計算するMPCの方が効率的である可能性があります。\n\n## まとめ\n\nFHEは2009年以降、長足の進歩を遂げていますが、依然として非常に遅く、非効率的です。CRDTは、そのアーキテクチャにより速度が低下する可能性があり、FHEを追加するとさらに遅くなる可能性があります。この記事では、CRDTとFHEを組み合わせることでサーバーがコンテンツを理解せずにドキュメントの変更を同期できるようにする方法についてですが、FHEを使用することなく、それを実現するための他の方法もあります。"
}