{
  "comments_id": "43954649",
  "rank": 3,
  "title": "I built a native Windows Todo app in pure C (278 KB, no frameworks)",
  "link": "https://github.com/Efeckc17/simple-todo-c",
  "created_date": "2025-05-11T20:11:41.171076",
  "comments_summary": "これは、Cで記述されたネイティブなWindows ToDoアプリケーションに関するHacker Newsのコメントのスレッドです。\n\n## 実行可能ファイルのサイズ\n\n多くのコメントは、278 KBという実行可能ファイルのサイズに焦点を当てています。一部の人は、静的ライブラリへのリンクが原因だと考えており、DLLへのリンクを提案しています。ただし、他の人は、DLLはコードが共有される場合にのみサイズを削減すると反論しています。また、最適化フラグ（-Osまたは-Oz）を使用すると、サイズを小さくできると提案しています。一部のユーザーは、以前はUPXを使用して実行可能ファイルを圧縮していたことを思い出しましたが、これはウイルス対策ソフトウェアによってフラグが立てられる可能性があります。いくつかのコメントでは、同じアプリケーションが10 KB未満で実現可能であるはずだと示唆しています。\n\n## Windowsマニフェストファイル\n\nコメントでは、アプリケーションマニフェストファイルを追加すると、Windows 2000以降のGUIスタイリングが得られることが示唆されています。マニフェストファイルには、互換性のあるWindowsのバージョンやHi-DPI認識などの設定も含まれています。マニフェストファイルがない場合、Windowsはアプリケーションが古いとみなし、互換性のために古いデフォルトに戻ります。\n\n## モダンさの定義\n\nこのアプリケーションの「モダンさ」については議論があります。一部の人は、フレームワークがないために、スケーリングされたDPIでのぼやけたフォント、Tabサポートの欠如、テキストフィールドでのCtrl+A選択の欠如など、最新のフレームワークが提供する機能が欠けていると指摘しています。C++を使用すると、std::stringやstd::arrayなどの機能を使用して、コードをより小さく、安全にできると提案されています。\n\n## 古い技術へのノスタルジー\n\n一部のコメントは、6502プログラミングや、より小さく効率的なソフトウェアの時代へのノスタルジーを表明しています。彼らは、今日のソフトウェアの肥大化を嘆き、リソース制約のある環境でのプログラミングの課題を思い出しています。\n\n## まとめ\n\nコメントのスレッドは、アプリケーションのサイズ、Windows APIの使用法、最新のプログラミング手法、そして古い技術へのノスタルジーなど、さまざまなトピックに触れています。"
}