{
  "comments_id": "44573409",
  "rank": 5,
  "title": "To be a better programmer, write little proofs in your head",
  "link": "https://the-nerve-blog.ghost.io/to-be-a-better-programmer-write-little-proofs-in-your-head/",
  "created_date": "2025-07-15T20:14:02.112847",
  "comments_summary": "この記事は、コードについて頭の中で「小さな証明」を書くことを推奨するものであり、コードが証明しやすい形式で書かれているべきであると主張しています。\n\n## バイナリサーチの難しさ\n\nバイナリサーチとその亜種は、ループ不変量の観点から問題を考えないと、正しくコーディングするのが驚くほど難しいことが指摘されています。プログラミングパールの著者であるジョン・ベントレーは、IBMのプログラマにバイナリサーチを書くタスクを与えたところ、実装の90%にバグが含まれていました。Googleの研究論文でも、バイナリサーチ（およびマージソート）の実装のほとんどすべてにバグが含まれていると指摘されています。\n\n## 証明支援とLLM\n\nLLMに証明支援ができるようになれば、より良いコードを書けるようになるかもしれません。トレーニングコーパスが平凡なコードに偏っているという問題がありますが、コードを分析して変更を提案するエージェントループを使用することで、改善が可能になるかもしれません。\n\n## 実践的なコーディング\n\n不変量と事前事後条件について考えることは、言語とコードベースの慣用的なコードを書けば、不要になるか、大幅に削減されることがよくあります。競争的プログラミングは、コードが正しいことを確認するための適切なテクニックを教えるのに優れています。コードが慣用的な場合、必要な不変量を無料で取得できます。\n\n## コードの進化\n\n優れた開発者であることの一部は、この方向にシステムを進化させることができることです。実際にはシステムは厄介ですが、インバリアントの穴を段階的に減らし、成功のピットを構築することについて、注意深くあるべきです。\n\n## まとめ\n\nこの記事では、プログラムの正しさを保証するために、形式的な証明だけでなく、コードの論理的性質を理解し、不変条件を意識することの重要性を強調しています。また、コードを証明しやすい形式で書くこと、特に可変状態を避け、型システムを活用することが重要であると指摘しています。ただし、すべての場合において100%完璧なコードを書くことが最適とは限らず、状況によっては迅速なリリースが優先される場合もあることに注意が必要です。"
}