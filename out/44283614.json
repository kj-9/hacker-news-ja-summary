{
  "comments_id": "44283614",
  "rank": 5,
  "title": "Simplest C++ Callback, from SumatraPDF",
  "link": "https://blog.kowalczyk.info/a-stsj/simplest-c-callback-from-sumatrapdf.html",
  "created_date": "2025-06-15T20:12:04.791999",
  "comments_summary": "この記事は、SumatraPDFの作者が独自のコールバック関数を実装した経緯と、それに対するHacker Newsのコメントです。\n\n## C++の選択と代替案\n\nSumatraPDFがC++で書かれていることに対する驚きや、他の言語（Zig、Odin、Goなど）の提案がありました。作者は、SumatraPDFが15年前に開始され、当時はC++以外の選択肢がなかったこと、C/C++ライブラリとの統合が必須であることを説明しています。Goのサイズが大きいことや、WindowsでのC/C++コードとの連携が難しいことも、C++を選んだ理由として挙げられています。\n\n## std::functionの代替としての独自実装\n\n作者は、std::functionの代わりに独自のコールバック関数を実装した理由として、コードのシンプルさ、理解しやすさ、小ささ、そして速度を挙げています。std::functionの機能は強力ですが、コードが複雑になるため、独自の軽量な実装を選びました。\n\n## パフォーマンスと実装の詳細\n\nコメントでは、独自のコールバック関数の実装におけるパフォーマンスの問題（コピーの発生など）や、std::pairの使用、完全転送の利用などが提案されました。作者は、自身のコードのパフォーマンスを擁護し、std::functionの複雑さを避けることを重視していると説明しています。\n\n## SumatraPDFへの感謝\n\n多くのユーザーがSumatraPDFに感謝の意を表しており、特にAdobe Acrobat Readerと比較して、その軽快さ、速度、使いやすさを高く評価しています。\n\n## まとめ\n\nSumatraPDFの作者は、過去の経緯、C++との相性、パフォーマンスへのこだわり、そしてコードの理解しやすさを重視して、独自のコールバック関数を実装しました。この決定には、C++の専門家から改善の提案がありましたが、作者は自身の選択を擁護し、SumatraPDFの成功はC++とWindows APIの直接利用によるものだと考えています。"
}