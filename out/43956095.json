{
  "comments_id": "43956095",
  "rank": 8,
  "title": "Why not object capability languages?",
  "link": "https://blog.plan99.net/why-not-capability-languages-a8e6cbdf9682",
  "created_date": "2025-05-11T20:11:41.171076",
  "comments_summary": "この記事は、AndroidのRPCメカニズムであるBinderや、workerdのアイソレートなど、広く使われているが、あまり知られていないケイパビリティメカニズムについて解説しています。\n\n## Binder\nAndroidのRPCメカニズムであるBinderは、オブジェクトケイパビリティのように動作します。プロセスは送信されたものだけを使用でき、他のBinderハンドルを委譲できます。\n\n## workerdのアイソレート\nworkerdで使用されているアイソレートは、サンドストーム/Cap'n Protoの系統をたどることができます。ケイパビリティを委譲/降格させる可能性は低いものの、このコンセプトがメインストリームプラットフォームに搭載されているのは素晴らしいことです。\n\n## BreakApp\nnode.jsエコシステムでこのアイデアを実装した優れた論文があります。「BreakApp：自動化された柔軟なアプリケーションの区画化」は、モジュールを実行できるセキュリティスコープを指定できるように`require`署名を変更します。これはケイパビリティレベルでは完全には機能しませんが、サービス拒否攻撃など、特別なケイパビリティを必要としない異常なサプライチェーン攻撃に対する斬新な保護を提供します。\n\n## まとめ\nこの記事では、広く使われているが、あまり知られていないケイパビリティメカニズムについて解説しました。AndroidのBinder、workerdのアイソレート、BreakAppなどが紹介されています。"
}