{
  "comments_id": "43822659",
  "rank": 8,
  "title": "Show HN: Web-eval-agent – Let the coding agent debug itself",
  "link": "https://github.com/Operative-Sh/web-eval-agent",
  "created_date": "2025-04-28T20:12:38.462279",
  "comments_summary": "この Hacker News の投稿は、AI アシスタント Web アプリ開発者向けの MCP サーバーに関するものです。このサーバーは、ブラウザーエージェントを使用して、エディター内で AI が行った変更が実際に機能するかどうかをテストします。\n\n## 主なテーマ 1: 課題の特定\n開発者は、AI 支援コーディングにおいて、コーディング自体よりも、アプリを開いてフローをクリックし、ネットワークタブを見て、コンソールエラーをエディターにコピーするという退屈なテスト作業が最も難しいと感じています。\n\n## 主なテーマ 2: 解決策\nMCP サーバーは、IDE エージェントと Playwright 搭載のブラウザー使用エージェントの間に位置します。ブラウザーを起動し、IDE エージェントからの指示に従ってアプリをナビゲートし、ステップ、コンソールイベント、およびネットワークイベントを IDE エージェントに送り返して、アプリの状態を評価できるようにします。\n\n## 主なテーマ 3: 改善点\nGemini Flash 2.0 を使用して、Browser-use の元の Claude 呼び出しをプロキシし、レイテンシーを約 8 秒から約 3 秒に短縮します。また、コンソール/ネットワークログを 10,000 文字に制限して、コンテキスト制限内に収まるようにし、無関係なログ (たとえば、ノイズの多い XHR リクエスト) を除外します。\n\n## 主なテーマ 4: 今後の計画\nOAuth 画面の一時停止/移動、ブラウザー認証状態の保存/ロード、自動テスト作成および回帰テスト作成のための Playwright ステップ記録、Web バージョンを提供することによる Loveable / v0 / Bolt.new サイトのサポートを行う予定です。\n\n## まとめ\nこの投稿では、AI 支援 Web アプリ開発者向けの MCP サーバーを紹介し、テストプロセスの自動化と効率化を目的としています。開発者は、このツールを試してフィードバックを提供することが奨励されています。"
}