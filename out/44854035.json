{
  "comments_id": "44854035",
  "rank": 9,
  "title": "Writing simple tab-completions for Bash and Zsh",
  "link": "https://mill-build.org/blog/14-bash-zsh-completion.html",
  "created_date": "2025-08-10T20:13:23.852809",
  "comments_summary": "この記事は、zsh の補完機能をカスタマイズする方法について解説しています。\n\n## zsh 補完のカスタマイズ\n\n- zsh 補完は複雑だが、便利なツール。\n- Ansible のラッパースクリプトに自動補完を追加することで、大規模な Ansible プロジェクトを使いやすくすることができる。\n- Homebrew を使用して配布された CLI は、自動的に補完機能をインストールすることができる。\n- zsh 起動時に zsh 補完スクリプトを毎回読み込むのではなく、$fpath 上のどこかにインストールすると、zsh が補完を「コンパイル」してキャッシュするため、シェルの起動時間を大幅に短縮することができる。\n\n## 標準的な補完フラグの必要性\n\n- コマンドが `--help` フラグを実装することで、補完スクリプトの作成を回避できる。\n- `_gnu_generic` 関数を使用すると、`--help` フラグを持つコマンドの補完を簡単に行うことができる。\n- `clap_complete` パッケージを使用すると、Rust で一般的な引数解析ライブラリの補完を自動的に実装できる。\n- `--generate` オプションを使用すると、ripgrep でシェル補完と man ページを生成できる。\n\n## シェルの選択\n\n- macOS で Bash を使用する人や、Linux で Zsh を使用する人もいる。\n- Zsh の方が Bash よりもカスタマイズ性が高い。\n- fish shell は、man ページから補完ファイルを自動的に生成できる。\n\n## コマンドライン構文の多様性\n\n- コマンドラインの構文は多様であり、`--help` オプションの形式も異なる。\n- CLI ツールキットを使用しないコマンドもあり、構文がさらに不規則になる場合がある。\n- Zsh の `_gnu_generic` は、特定の CLI ツールキットに対して優れた「自動」補完システムとして機能する。\n\n## まとめ\n\nこの記事では、zsh の補完機能をカスタマイズする方法、標準的な補完フラグの必要性、シェルの選択、コマンドライン構文の多様性について議論しました。また、zsh 補完をより使いやすくするためのヒントやツールも紹介しました。"
}