{
  "comments_id": "43774726",
  "rank": 5,
  "title": "Graphics livecoding in Common Lisp",
  "link": "https://kevingal.com/blog/cl-livecoding.html",
  "created_date": "2025-04-23T20:13:23.902427",
  "comments_summary": "このコメントスレッドでは、ライブコーディングの利点と、Lispがこの開発スタイルにどのように適しているかについて議論されています。\n\n## ライブコーディングの利点\n- 編集とプログラム実行の間の障壁を取り除くことで、より迅速な反復と実験が可能になる。\n- プログラムの状態を維持しながらコードを更新できるため、再コンパイルや再起動の必要がない。\n- 特にアイデアを具体化する段階で、開発プロセスをより効率的にすることができる。\n\n## Lispとの関連性\n- Lispはコードをデータとして扱うため、ライブコーディングに適している。\n- Common Lisp（CL）は、言語実装の一部としてシームレスなライブコーディングエクスペリエンスを提供する。\n- ライブリロードは、Common Lispが提供する便利な機能であり、探求、デバッグ、トラブルシューティングをスムーズに行うことができる。\n\n## ライブコーディング環境\n- Love2D用のライブ開発拡張機能（livelove）を使用すると、LuaとGLSLでリアルタイムにグラフィックスのライブコーディングが可能。\n- CEPLライブラリを使用すると、OpenGLバックエンドでライブシェーダーのようなプログラムを作成可能。\n\n## ライブコーディングの課題\n- 大規模なTypeScript Nodeプロジェクトでは、ライブシステムでの単一関数の再コンパイルがサポートされていないため、変更ごとにダウンタイムが発生する可能性がある。\n- V8エンジンの開発者は、ライブホットリロードを優先していないため、TypeScriptで同様の機能を実現することが難しい場合がある。\n\n## まとめ\nこのスレッドでは、ライブコーディングの利点と、特にLispのような言語でのその実装について議論されています。ライブコーディングは、開発プロセスを迅速化し、実験を容易にする強力なツールですが、特定の言語や環境では課題も存在します。"
}