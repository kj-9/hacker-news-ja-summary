{
  "comments_id": "44226879",
  "rank": 3,
  "title": "Show HN: Munal OS: a graphical experimental OS with WASM sandboxing",
  "link": "https://github.com/Askannz/munal-os",
  "created_date": "2025-06-09T20:13:18.921877",
  "comments_summary": "Gazocheは、Rustで作成された実験的なオペレーティングシステムであるMunal OSの最初のバージョンを公開しました。これは、単一のEFIバイナリとしてコンパイルされるユニカーネル設計であり、プロセス分離に仮想アドレス空間を使用しません。代わりに、アプリケーションはWASMにコンパイルされ、埋め込みWASMエンジン内で実行されます。\n\\n\n\n\\n\n## Munal OSの機能\\n\n\n人々は、Munal OSのグラフィカルインターフェース、UIツールキット、およびWebブラウザ、テキストエディタ、Pythonターミナルなどの埋め込みアプリケーションの選択に感銘を受けています。また、Munal OSがWASMをプラットフォームとして使用していることにも関心があり、将来すべてのOSがネイティブにWASMコードを実行できるようになることを期待しています。\\n\n\n\\n\n## 技術的な詳細と実装\\n\n\nGazocheは、wasmtimeをno_stdモードでコンパイルするのが困難だったため、wasmiを使用したと説明しています。wasmiの作成者は、wasmiが組み込み環境で使用されていることを喜んでいます。また、wasmiの新しいバージョンが、燃料切れ時にyieldできる再開可能な関数呼び出し機能を提供していることを指摘し、WASMアプリケーションを段階的に実行するためのより効率的なアプローチになる可能性があると述べています。\\n\n\n\\n\n## 潜在的な改善と将来の方向性\\n\n\nコメントでは、RedoxがWASIをサポートすることを目指しているため、これら2つのsyscallインターフェースが時間の経過とともに連携して成長できるかどうかという疑問が提起されています。また、WASMコンポーネントがより現実的になった後、このような試みがどのように見えるかについても関心が集まっています。WASMが、1つの大きなプリコンパイルされたアプリケーションだけでなく、より多くの用途に使用できるようになることが期待されています。\\n\n\n\\n\n## プロジェクトの価値とモチベーション\\n\n\n一部のコメンターは、このようなプロジェクトが人類に与える価値について疑問を呈していますが、他のコメンターは、楽しむことや個人的な興味のためにプロジェクトを作成することの重要性を強調しています。また、このようなプロジェクトが他のプロジェクトに影響を与えたり、イノベーションに関する重要な議論を促進したりする可能性も指摘されています。\\n\n\n\\n\n## まとめ\\n\n\nMunal OSは、Rustで作成された実験的なオペレーティングシステムであり、WASMを使用してアプリケーションを分離するユニカーネル設計を採用しています。このプロジェクトは、その機能、技術的な実装、およびWASMをプラットフォームとして使用していることで、多くの関心を集めています。また、将来の改善、潜在的な用途、およびプロジェクトの価値とモチベーションに関する議論も生まれています。\\n"
}