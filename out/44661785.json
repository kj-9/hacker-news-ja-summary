{
  "comments_id": "44661785",
  "rank": 7,
  "title": "Hyperpb: 10x faster dynamic Protobuf parsing that's faster than generated code",
  "link": "https://buf.build/blog/hyperpb",
  "created_date": "2025-07-23T20:13:54.451285",
  "comments_summary": "これは、新しいprotobuf実装であるHyperPBに関するHacker Newsのコメントの要約です。\n\n## 名前\nユーザーは、名前が「superpb」（「superb」と発音）であるべきだったという、逃した命名の機会についてコメントしました。\n\n## コンパイル\nユーザーは、JITコンパイラの使用と、コンパイルされたコードを永続化して後でロードする方法があるかどうかについて質問しました。別のユーザーは、これをAoT（Ahead-of-Time）コンパイルと呼びました。\n\n## 関連ディスカッション\n別のユーザーは、先週の技術的な説明に関する議論へのリンクを共有し、この記事の方が発表よりもはるかに興味深いと述べました。\n\n## パフォーマンス\nC++ / Rust Protobuf実装に対するパフォーマンスの差分について議論がありました。Goはすでに非常に競争力があり、C++のライフタイムの問題は推論が難しく、開発者は安全のためにコピーを強制されるため、Goで達成可能な実用的なパフォーマンスはより高くなっています。公式のC++ライブラリでは、protobufはエイリアスの可能性さえ認識していません。Googleには文字列をprotobufにコピーしないためのいくつかの異なる方法がありますが、それらはすべてオープンソース版から削除されています。\n\n## まとめ\nHyperPB、コンパイル、パフォーマンス、および関連ディスカッションを含む、新しいprotobuf実装であるHyperPBに関する議論。一部のユーザーは、その名前とコンパイルプロセスについてコメントし、他のユーザーはGoとC++のprotobuf実装に対するパフォーマンスについて議論しました。また、以前の技術的な説明へのリンクも共有されました。"
}