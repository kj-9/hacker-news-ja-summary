{
  "comments_id": "45279384",
  "rank": 1,
  "title": "WASM 3.0 Completed",
  "link": "https://webassembly.org/news/2025-09-17-wasm-3.0/",
  "created_date": "2025-09-17T20:12:18.809278",
  "comments_summary": "このHacker Newsのスレッドは、Wasm 3.0のリリースについて議論しています。このリリースには、64ビットアドレス空間、ガベージコレクション（GC）、例外処理などの新機能が含まれています。\n\n## 64ビットメモリ\n64ビットメモリの実装に関するパフォーマンスへの影響について議論されています。32ビットWASMコードの実行時に64ビットホストのアドレス空間を利用して境界チェックを完全に省略できる可能性がある一方、WASMのアドレス空間も64ビットの場合には、パフォーマンスの低下が発生する可能性があるという指摘があります。また、Memory64のパフォーマンスはハードウェア、OS、WASM自体の設計によって制限されているというブログ記事への言及もあります。\n\n## ガベージコレクション（GC）\nWASMにGCが含まれることの是非について議論されています。GCを含めないことは間違いであり、既存の優れたGCを持つプラットフォーム（ブラウザなど）でプログラムごとに完全なGCを実装するのは無駄であるという意見があります。WASMのGCは、JavaScriptエンジンと同じGCを使用できるため、コードサイズを削減し、開発工数を削減できるという利点があります。一方で、特定のニーズに合わせて高度に最適化されたGCを持つ言語は、WASMのGCを使用できない可能性があるという指摘もあります。\n\n## 例外処理\n第一級の例外サポートがあるのは素晴らしいという意見があります。C++の例外はEmscriptenではほとんど機能せず、WASMでは任意のラベルに分岐できないことが問題の一因となっています。\n\n## DOMアクセス\nWASMからDOMへの直接アクセスがないことに対する不満の声が多く上がっています。DOM操作をJavaScript以外の言語で行いたいという要望があり、WASMがWebAssemblyの略であるにもかかわらずDOMアクセスがないのは矛盾しているという意見もあります。一方で、JavaScriptへの呼び出しは安価であり、JSだけでも驚くほど高速であるため、WASMでDOMを直接操作する必要はないという意見もあります。\n\n## その他\nその他、テールコール、マルチメモリ機能、コンポーネントモデル、セキュリティ、WASIなど、さまざまなトピックについて議論されています。\n\n## まとめ\nWasm 3.0のリリースは、WASMの機能を拡張し、より多くの言語がWASMをターゲットにできるようにするための重要なステップです。64ビットアドレス空間、GC、例外処理などの新機能は、WASMのパフォーマンスを向上させ、開発者の生産性を向上させる可能性があります。しかし、DOMへの直接アクセスがないことや、一部の機能のパフォーマンスへの影響など、解決すべき課題も残っています。"
}