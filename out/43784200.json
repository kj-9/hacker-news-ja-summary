{
  "comments_id": "43784200",
  "rank": 8,
  "title": "A Principled Approach to Querying Data – A Type-Safe Search DSL",
  "link": "https://www.claudiu-ivan.com/writing/search-dsl",
  "created_date": "2025-04-24T20:13:07.626781",
  "comments_summary": "FSharp Type Providersに似た、データベース固有のタイプセーフなデータクエリソリューションについての議論。\n\n## Kyselyの利用\n- Kyselyはデータベース固有のタイプセーフなデータクエリソリューション。\n- prismaとkyselyを同じコードベースで使用するとうまくいく。\n- データベーススキーマはSQLによって駆動され、prismaは95％の場所で使用され、kyselyはパフォーマンスが重要な場合、またはprismaがSQL機能をサポートしていない場合に使用される。\n\n## prismaスキーマの処理\n- prismaスキーマにモデル/移行を処理させることによる潜在的な悪影響についての懸念。\n- stackzenを使用して、カスタムロジック用のRBAC/ABACをモデル/codegenにバックアップすることを検討。\n- RLS pgをsupabaseのように追加することを検討。\n- postgresビューを使用して、フィールド/属性レベルのセキュリティを処理することを検討。\n- データベースからAPI、アプリまで、スタックのすべてのレベルでデータを保護し、pgユーザーまたはクライアントを変更できる人が、見るべきではないデータを見ることができないようにすることが主な目標。\n\n## FSharp Type Providersとの類似性\n- FSharp Type Providersとの類似性についての質問。\n\n## JSON構成\n- JSON構成にも同様のものが適用されるべきで、SQL用のprismaと同様に、JSON用のものが存在すべき。\n- typeconf.devのようなものが提案されている。\n\n## オフライン時の応答性\n- ユーザーはオフライン時でもネイティブに近い応答性を期待するかについての疑問。\n- ユーザーは、最新のアプリケーションでインターネットなしで何かが動作すると驚くのではないかという意見。\n\n## まとめ\nこのスレッドでは、データベースクエリとスキーマ管理のためのさまざまなツールとアプローチについて議論されています。Kyselyとprismaの併用、stackzenによるセキュリティ対策、FSharp Type Providersとの比較、JSON構成の管理、オフライン時の応答性など、多岐にわたるテーマが取り上げられています。参加者は、これらのツールや概念が、より効率的で安全なアプリケーション開発にどのように貢献できるかを探求しています。"
}