{
  "comments_id": "44118023",
  "rank": 1,
  "title": "Show HN: I rewrote my Mac Electron app in Rust",
  "link": "https://desktopdocs.com/?v=2025",
  "created_date": "2025-05-28T20:13:26.265885",
  "comments_summary": "自然言語を使用してローカルで写真やビデオを検索する Mac アプリである Desktop Docs を Electron で構築したところ、アプリのサイズが大きく使いにくかったため、Rust と Tauri でアプリを書き直したところ、アプリのサイズが 83% 削減され、ファイル インデックス作成が高速化され、安定性が向上したことについての投稿です。\n\n## Rust/Tauri の選択 vs Swift/SwiftUI\nSwift/SwiftUIではなくRust/Tauriを選択した理由として、Windowsのサポートを予定しており、クロスプラットフォームのサポートが重要だったためと述べています。また、Electronでの経験から、JavaScriptから離れてRustを学ぶことは価値があったと述べています。Tauriのバンドルサイズの小ささも利点として挙げています。Swiftは良い言語だが、クロスプラットフォーム対応のためRustを選んだとのことです。\n\n## CLIP の実行\nCLIP を Rust でどのように実行しているかという質問に対して、onnxruntime のバインドを Ort crate とともに使用していると述べています。最大の課題は、onnxruntime をアプリにバンドルし、すべてが署名されていることを確認することでした。\n\n## Tauri の課題\nTauri を使用する上での課題として、プラットフォーム間のレンダリングの違いが挙げられています。Electron は Chrome をバンドルするため一貫性がありますが、Tauri は OS のデフォルトの Webview を使用するため、プラットフォームによってレンダリングが異なる可能性があります。また、Tauri 2.0 への移行はドキュメントが不十分で困難だったという意見もあります。\n\n## Redis の選択\nSQLite の代わりに Redis を選択した理由として、ベクトルの埋め込みを処理する際に Redis の検索モジュールの方が良い結果が得られたためと述べています。SQLite + VSS 拡張機能でプロトタイプを作成しましたが、Redis ほどの結果は得られませんでした。\n\n## その他\n- トライアル版がないこと、連絡先情報が不足していることに対するフィードバックがあります。\n- Electron を使用することによるパフォーマンスのボトルネックについての議論があります。\n- ベクトル検索モジュールとして Redis を使用することについての議論があります。\n- Tauri は WebkitGTK の問題があるため、完全なクロスプラットフォームではないという意見があります。\n\n## まとめ\nElectronで開発していたMacアプリをRustとTauriで書き直した結果、アプリサイズが大幅に削減され、パフォーマンスが向上したという経験が共有されています。クロスプラットフォーム対応を重視してRustを選択したこと、Tauriのレンダリングの違いやWebViewの互換性に関する課題、Redisをベクター検索に使用した理由などが議論されています。また、トライアル版の提供や連絡先情報の追加など、製品に関するフィードバックも寄せられています。"
}