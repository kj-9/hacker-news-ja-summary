{
  "comments_id": "44062160",
  "rank": 9,
  "title": "Fast Allocations in Ruby 3.5",
  "link": "https://railsatscale.com/2025-05-21-fast-allocations-in-ruby-3-5/",
  "created_date": "2025-05-22T20:13:23.097544",
  "comments_summary": "この記事は、Rubyの新しいコンパイラであるZJITの開発と、YJITとの比較、そしてパフォーマンス改善について議論しています。\n\n## YJITとZJIT\nYJITは当面維持され、Ruby 3.5にはYJITとZJITの両方が搭載される予定です。ZJITはより伝統的なアプローチで、YJITよりも高速になる可能性があります。YJITの高速アロケーションなどの機能は、ZJITにも導入される予定です。\n\n## CからRubyへの書き換えによる高速化\nCで実装されたコードをRubyで書き換えることで、パフォーマンスが向上しています。これは、RubyからCへの呼び出しにはオーバーヘッドがあり、JITコンパイラがCコードを最適化できないためです。Rubyで書き換えることで、JITコンパイラがより最適化できるようになります。JITコンパイルされた関数は、プロファイリング情報、型情報が豊富であるため、C関数よりも高速になる可能性があります。\n\n## メソッドベースJITとLBBV JIT\nZJITはメソッドベースJITであり、YJITはLBBVコンパイラです。メソッドベースJITは、レジスタの使用をより最適化できる可能性があります。ZJITは、実行時から型を「学習」できる型プロファイリングを追加しました。\n\n## Railsアプリケーションの高速化\nZJITがRailsアプリケーションにどの程度の高速化をもたらすかはまだ不明です。\n\n## WASMへの収束\nすべての言語がWASMのようなものに収束しているという意見があります。\n\n## まとめ\nRubyのパフォーマンス改善に関する議論は、YJITとZJITの開発、CからRubyへの書き換え、新しいコンパイラのアプローチ、そして将来のWASMへの収束といった多岐にわたるテーマを含んでいます。"
}