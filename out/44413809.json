{
  "comments_id": "44413809",
  "rank": 7,
  "title": "4-10x faster in-process pub/sub for Go",
  "link": "https://github.com/kelindar/event",
  "created_date": "2025-06-29T20:12:42.753954",
  "comments_summary": "kelindarは、プロセス内で非常に軽量なPub/Subが必要な場合に役立つ可能性のあるものを共有しました。これはGoで小さなマルチプレイヤーゲームを構築中に作成されました。プレーンなチャネルループよりも高速かどうかを確認するために、この小さなイベントバスをテストしたところ、構成に応じて、プレーンなチャネルループよりも約4〜10倍高速にイベントを配信します。\n\n## パフォーマンスの向上\n\n人々は、チャネルよりも4〜10倍高速であるという主張に興味を持っています。チャネルがPub/Subメカニズムとして設計されていないため、チャネルを使用しない別の設計で改善できる可能性があることを示唆しています。チャネルをメモリ共有メカニズムと考える人もいます。\n\n## チャネルの使用法\n\nチャネルは低レベルのプリミティブであり、データパイプラインを構築するために使用する必要がありますが、メインのAPIサーフェスとして使用するべきではありません。チャネルは、以前は不可能だったことを行うために使用されていましたが、Goは以前から可能だったことをよりクリーンに行うのに適していることがわかりました。\n\n## パフォーマンスを向上させるために削除された機能\n\nパフォーマンスを向上させるために削除された機能、それらの機能がそれらを使用しないすべてのユーザーに税金を課すことが公平であるかどうか、およびそれらの機能を使用する場合にのみコストを支払い、使用しない場合は安価または無料である低コストの抽象化となるようにコードを再配置する方法について議論する価値があります。\n\n## まとめ\n\n全体として、この投稿はGoで軽量のPub/Subを実装するための興味深い方法について議論しています。人々はパフォーマンスの向上に興味を持っており、チャネルの使用法、およびパフォーマンスを向上させるために削除された機能について議論しています。"
}