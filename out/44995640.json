{
  "comments_id": "44995640",
  "rank": 6,
  "title": "RFC 9839 and Bad Unicode",
  "link": "https://www.tbray.org/ongoing/When/202x/2025/08/14/RFC9839",
  "created_date": "2025-08-23T20:11:48.635510",
  "comments_summary": "このHacker Newsのスレッドでは、Unicodeの複雑さ、特に特定の文字が原因で生じる可能性のある問題について議論されています。IETFがRFC 9839で「Bad Unicode」に対処すること、そして既存のライブラリがどのようにこのガイダンスを組み込めるかについても議論されています。\n\n## Unicodeの複雑さ\n\nUnicodeには、言語の書き方を形式化しようとした結果として、理解し、処理するのが難しい複雑さが多数あります。結合文字、絵文字、双方向テキストの処理には、特別な考慮が必要です。標準化の取り組みにもかかわらず、異なるシステム間でUnicode文字を処理する際に矛盾や課題が残っています。\n\n## Unicode文字の検証とサニタイズ\n\nJSONシリアライゼーションライブラリは、無効なUnicode文字をフィルタリングするオプションを提供する必要があります。RFC 9839は、シリアライゼーション/サニタイズ/検証を行う既存のライブラリで使用するように設計されています。Unicodeの検証とクリーンアップは、JSONだけでなく複数の場所で必要とされるため、個別に行う必要があります。\n\n## Unicodeにおけるセキュリティへの懸念\n\n文字列内の不正な部分を暗黙的に削除すると、セキュリティリスクが発生する可能性があります。Trojan Source攻撃は、表示されるテキストが実際のコードと一致しない場合に発生する可能性があります。双方向オーバーライド文字は、ファイルの拡張子を難読化するために悪用される可能性があり、危険な実行可能ファイルをテキストファイルとして偽装する可能性があります。\n\n## Unicode標準と実装\n\nUnicode Consortiumは、複雑な言語の課題に対処するために当初は素晴らしい仕事をしていましたが、困難な問題に正面から取り組むのではなく、ささいなことに多くのリソースを費やしています。Unicodeの初期のアップデートに対する悪い反応により、コードポイントを修正することが不可能になりました。\n\n## Unicodeの代替表現\n\n代替の文字列表現には、「Unicode Scalar」（「整形式UTF-16」）、「潜在的に不正なUTF-16」（「WTF-8」）、「潜在的に不正なUTF-8」などがあります。ワイヤ形式は解析されるまで潜在的に不正であり、実装はUTF-8文字列内のサロゲートコードポイントの処理方法を選択する必要があります。\n\n## まとめ\n\n全体として、スレッドではUnicodeの複雑さ、潜在的なセキュリティリスク、標準化の取り組みについて強調しています。また、Unicode文字を処理する際の検証とサニタイズの重要性、およびUnicodeを異なるシステムでどのように表現および処理できるかについても強調しています。"
}